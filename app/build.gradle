apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.0"
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ch.epfl.sweng.erpa"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ['toothpick_registry_package_name': 'ch.epfl.sweng.erpa.smoothie']
            }
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        disable 'InvalidPackage' // Toothpick runtime includes references to javax.inject which have
        // runtime retention even if they're not used since we use registries
        // for injection instead of reflection.
    }

    dataBinding {
        enabled = true
    }
}

configurations {
    implementation.exclude module: 'com.android.tools.external.lombok'
}

repositories {
    jcenter()
}

dependencies {
    def room_version = "1.1.1"
    implementation "android.arch.persistence.room:runtime:$room_version"
    implementation "com.google.code.gson:gson:2.8.2"
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'org.mockito:mockito-android:2.22.0'
    annotationProcessor 'com.github.stephanenicolas.toothpick:toothpick-compiler:1.1.3'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    annotationProcessor 'org.projectlombok:lombok:1.18.2'
    compileOnly 'org.projectlombok:lombok:1.18.2'
    implementation "com.kosprov.jargon2:jargon2-api:1.1.1"
    implementation "com.kosprov.jargon2:jargon2-native-ri-backend:1.1.1"
    implementation 'at.favre.lib:bcrypt:0.5.0'
    implementation 'com.amdelamar:jhash:2.1.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.annimon:stream:1.1.4'
    implementation 'com.github.stephanenicolas.toothpick:smoothie:1.1.3'
    implementation 'com.github.stephanenicolas.toothpick:toothpick-runtime:1.1.3'
    implementation 'com.jakewharton:butterknife:8.8.1'
    implementation 'com.kosprov.jargon2:jargon2-api:1.1.1'
    implementation 'com.kosprov.jargon2:jargon2-native-ri-backend:1.1.1'
    implementation 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
    implementation 'me.tatarka:gradle-retrolambda:3.2.5'
    testImplementation 'com.github.stephanenicolas.toothpick:toothpick-testing:1.1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.22.0'



    annotationProcessor "android.arch.persistence.room:compiler:$room_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def jacocoExcludedClasses = [
      // Tests classes
      '**/*Test*.*',
      // Android autogenerated classes
      '**/BuildConfig.*', '**/Manifest*.*', '**/R$*.class', '**/R.class', 'android/**/*.*',
      // Toothpick autogenerated classes
      '**/*$$Factory.class', '**/*$$MemberInjector.class', '**/smoothie/*.class',
      // Butterknife autogenerated classes
      '**/*_ViewBinding*.class',
      // Jargon autogenerated classes
      '**/BR.class', '**/databinding/*.class',
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: jacocoExcludedClasses)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
        'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}
